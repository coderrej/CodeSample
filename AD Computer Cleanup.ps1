#
#
# This is a script to create a CSV which lists inactive computers based on the amount of dates specified.
# Once the CSV is created you can use -clean parameter to disable all objects in the CSV and move them into a group for later deletion.
#
#

param (
    [switch]$Clean
)

Import-Module ActiveDirectory 

##
# This runs if no clean parameter is specified with script
##

if (!$Clean) {

# Prompts user for number of days inactive, throws error if less than a day. Subtracts amount of days specified from current date
$DaysInactive = Read-Host "Enter number of days inactive"
if ([int]$DaysInactive -le 1) {
	Write-Error "Must enter value greater than 1 day" -ErrorAction Stop
}
$time = (Get-Date).Adddays(-($DaysInactive))

# Get all Windows AD-joined computers with lastLogonTimestamp less than time set above (in days) 
Get-ADComputer -Filter {LastLogonTimeStamp -lt $time -and operatingSystem -ne 'Mac OS X'} -Properties LastLogonTimeStamp |
  
# Output hostname and lastLogonTimestamp into CSV, expression converts into human readable datetime format and then exports to CSV in same directory as script
select-object sAMAccountName,@{Name="LastLogonDate"; Expression={[DateTime]::FromFileTime($_.lastLogonTimestamp)}} | export-csv .\ComputerCleanup.csv -notypeinformation

# Gets current directory and tells user where CSV file was saved
$currentDirectory = Get-Location
Write-output "File written to $currentDirectory\ComputerCleanup.csv"
}

##
#This runs if clean parameter is specified with script. I know this is a mess, I'm sorry!
##

if ($Clean) {

# Prompt and test for location of CSV created by script. Need to add check to make sure it's actually a CSV and add some more error handling...
$csvCleanPath = Read-Host ("Specify the location of a CSV generated by this script")
$csvPathTest = Test-Path $csvCleanPath
    
    # If path is valid...
    if ($csvPathTest -eq "True")
        {
            # Gets root domain DN and appends Computer container. Count is iterated in loop for output about how many computers were added to group.
            $domainInfo = Get-ADDomain
            $groupOUPath = "CN=Computers," + $domainInfo.DistinguishedName
            $count = 0
            # Gets date for setting a description for group and creates the group in Computers container.
            $currentTime = Get-Date
            $groupDescription = "Disabled as of $currentTime"
            New-ADGroup -name "AD Computer Cleanup" -SamAccountName "ADComputerCleanup" -GroupCategory Security -GroupScope Global -Path $groupOUPath -Description $groupDescription
            # Imports CSV from specified path and iterates through each entry to add to group and disable object
            $csvClean = Import-Csv -path $csvCleanPath
            foreach ($computer in $csvClean) {
                Add-ADGroupMember -identity ADComputerCleanup -members $computer.sAMAccountName
                Disable-ADAccount -identity $computer.sAMAccountName
                $count++
            }
            
            Write-Output "Disabled $count computer(s) and added them to AD Computer Cleanup group in the Computers container"
        }
    else
        {
            Write-Error "Not a valid path, stopping." -ErrorAction Stop
        }

}

# Keeps PS window open when script finishes
Read-Host -Prompt "Press enter to exit script"